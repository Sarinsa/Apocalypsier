import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '[6.0,6.2)', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "apocalypse.mixins.refmap.json"
}

version = "${mc_version}-${mod_version}-${mod_state}"
group = 'com.toast.apocalypse'
archivesBaseName = 'Apocalypse-Rebooted'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                apocalypse {
                    source sourceSets.main
                }
            }
        }
        client {
            property "mixin.debug.export", "true"
            property 'mixin.env.disableRefMap', 'true'

            arg "-mixin.config=apocalypse.mixins.json"
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            property "mixin.debug.export", "true"

            arg "-mixin.config=apocalypse.mixins.json"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'apocalypse'
        }

        data {
            args '--mod', 'apocalypse', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    flatDir {
        dir 'flat_deps'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    implementation fg.deobf("curse.maven:top-245211:${top_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Apocalypse",
            "Specification-Vendor": "Sarinsa",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Sarinsa",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "apocalypse.mixins.json"
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = 'api'
    include 'com/toast/apocalypse/api/**/*'
    exclude 'com/toast/apocalypse/api/impl/**/*'

    from sourceSets.main.output
    from sourceSets.main.allSource
}

task updateVersionCheck {
    try {
        File jsonFile = file('version_check.json')

        if (!jsonFile.exists()) {
            println("Version check json not present, strange! Generating new file...")
            jsonFile.createNewFile()
            println("The newly generated file is empty, cause I am lazy. Lets fill it out manually!")
        }
        else {
            def parsedJson = new JsonSlurper().parse(jsonFile)
            Map<String, String> versions = parsedJson.promos

            String modVersion = "${mod_version}"
            String modState = "${mod_state}"
            String mcVersion = "${mc_version}"

            String latest = mcVersion + "-latest"

            // We only operate with one version per branch
            for (String key : versions.keySet()) {
                if (key != latest) {
                    versions.remove(key)
                }
            }
            versions.put(latest, mcVersion + "-" + modVersion + "-" + modState)
            jsonFile.setText(JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson)))
        }
    }
    catch (Exception e) {
        e.printStackTrace();
    }
}

artifacts {
    archives apiJar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
